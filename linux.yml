---
#=====================================
# Gather facts and set custom ones
#=====================================
- name: "Set patching_time"
  ansible.builtin.set_fact:
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
  delegate_to: localhost
  run_once: true

- name: "Display logging directories"
  ansible.builtin.debug:
    msg:
      - "Logging dir on Ansible server: {{ activity_logs }}"

- name: "Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto

- name: "Create temp log directory"
  ansible.builtin.file:
    path: "{{ activity_logs }}"
    mode: '0777'
    state: 'directory'

#=====================================
# Pre-update system information
#=====================================
- name: "Set pre-update os_info"
  ansible.builtin.set_fact:
    os_info_pre_update:
      distribution: "{{ ansible_distribution }}"
      distribution_major_version: "{{ ansible_distribution_major_version }}"
      distribution_release: "{{ ansible_distribution_release }}"
      distribution_version: "{{ ansible_distribution_version }}"
      kernel_version: "{{ ansible_kernel }}"

- name: "Current OS version information before the update"
  ansible.builtin.blockinfile:
    block: |
      HOSTNAME: "{{ inventory_hostname }}" version before the update:
        distribution: "{{ os_info_pre_update.distribution  }}"
        distribution_major_version: "{{ os_info_pre_update.distribution_major_version }}"
        distribution_release: "{{ os_info_pre_update.distribution_release }}"
        distribution_version: "{{ os_info_pre_update.distribution_version }}"
        kernel_version: "{{ ansible_kernel }}"
    dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
    create: yes
    marker: " "
  delegate_to: localhost
  become: false

- name: "Return service state information"
  ansible.builtin.service_facts:

- name: "Display service list"
  ansible.builtin.debug:
    msg: "FACTS: {{ ansible_facts.services.keys()}}"

- name: "Collect a list of the mounted device"
  ansible.builtin.set_fact:
    dvs: "{{ ansible_mounts | map(attribute='device') | list }}"

- name: "Register all the system interface "
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ ansible_interfaces }}"
  when:
    - hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4'] is defined
    - hostvars[inventory_hostname]['ansible_%s' | format(item)]['active'] == true
    - hostvars[inventory_hostname]['ansible_%s' | format(item)]['device'] != 'lo'
  register: NIC_interface

- name: "Get the IP address for each interface"
  ansible.builtin.debug:
    msg: "{{ hostvars[inventory_hostname]['ansible_%s' | format(item.item)]['ipv4']['address'] }}"
  loop: "{{ NIC_interface['results'] }}"
  when: item.skip_reason is not defined
  register: NIC_IP

#=====================================
# Patch the system
#=====================================
- name: "Gather latest packages"
  ansible.builtin.apt:
    update_cache: yes

- name: "Display patches for installation and removal"
  ansible.builtin.apt:
    upgrade: safe
  register: patch_status

- name: "Log patches for installation and removal"
  ansible.builtin.lineinfile:
    line: "HOSTNAME: {{ inventory_hostname }} | Patches to install and remove: {{ patch_status.stdout_lines }}"
    dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
    create: yes
  delegate_to: localhost
  become: false

- name: "Install latest apt packages"
  ansible.builtin.apt:
    name: "*"
    state: latest
  when: confirm_update
  register: apt_result

- name: Upgrade the kernel
  ansible.builtin.apt:
    upgrade: dist

- block:
  - name: "Log if apt update fails"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | apt update failed, PLEASE CHECK THE SERVER"
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: false

  - name: "Apt failed"
    ansible.builtin.debug:
      msg: "HOSTNAME: {{ inventory_hostname }} | apt update failed, PLEASE CHECK THE SERVER"
  when: apt_result is defined and apt_result is failed

- block:
  - name: "Log if there is nothing to update"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | Nothing to update."
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: false

  - name: "Nothing to update"
    ansible.builtin.debug:
      msg: "HOSTNAME: {{ inventory_hostname }} | Nothing to update."
    notify:
      - Reboot system
    changed_when: true
  when: apt_result is defined and apt_result is succeeded and not apt_result.changed

- block:
  - name: "Log if apt update succeedes"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | apt update succeeded: {{ apt_result.stdout_lines }}"
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: false

  - name: "Update is done"
    ansible.builtin.debug:
      msg: "HOSTNAME: {{ inventory_hostname }} | apt update succeeded."
    notify:
      - Reboot system
    changed_when: true
  when: apt_result is defined and apt_result is succeeded and apt_result.changed

- name: "Trigger ansible handlers"
  ansible.builtin.meta: flush_handlers

#=====================================
# Post-update system information
#=====================================
- block:
  - name: "Make sure the services from the pre-check are running"
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
    when: ansible_facts.services[item]['state'] == "running"
    loop: "{{ ansible_facts.services.keys() | list }}"
    register: start_failed

  - name: "Show service restart status"
    ansible.builtin.debug:
      msg: "{{ start_failed }}"

  - name: "Creating a report when services are started successfully"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | {{ item }} : OK "
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    when: ansible_facts.services[item]['state'] == "running" and start_failed is not failed
    loop: "{{ ansible_facts.services.keys() | list }}"
    delegate_to: localhost
    become: false

  rescue:
    - name: "Send error msg if starting of service failed"
      ansible.builtin.lineinfile:
        line: "HOSTNAME: {{ inventory_hostname }} | {{ item.item }} : KO Please check it"
        dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
        create: yes
      when:
        - item.skipped is not defined
        - item.state is not defined
        - item.failed == true
      loop: "{{ start_failed.results }}"
      delegate_to: localhost
      become: false

- block:
  - name: "Check if the FS is mounted"
    ansible.builtin.shell:  df -hP | grep "{{ item }}"
    changed_when: false
    register: fs_checked
    loop: "{{ dvs }}"

  - name: "Creating a report when all the FSs are mounted successfully"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | {{ item.stdout }} : MOUNTED "
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    when: item.rc == 0
    loop: "{{ fs_checked.results }}"
    delegate_to: localhost
    become: false

  rescue:
    - name: "Send Error msg if mounting failed"
      ansible.builtin.lineinfile:
        line: "HOSTNAME: {{ inventory_hostname }} | {{ item.item }} : ****NOT MOUNTED***** "
        dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
        create: yes
      when: item.rc != 0
      loop: "{{ fs_checked.results }}"
      delegate_to: localhost
      become: false

- name: "Gather facts after update"
  ansible.builtin.setup:
    filter: ansible_distribution*

- block:
  - name: "Check if each interface status is active"
    vars:
      interface_status: "{{ hostvars[inventory_hostname]['ansible_%s' | format(item.item)].active }}"
    ansible.builtin.assert:
      that:
        - interface_status | bool
      fail_msg: "Interface {{ item.item }} is not active"
    loop: "{{ NIC_interface['results'] }}"
    loop_control:
      label: "{{ item.item }}"

  - name: "Creating a report when the interfaces are active"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | interface {{ item.item }} : OK  "
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    loop: "{{ NIC_interface['results'] }}"
    delegate_to: localhost
    become: false
  when: item.skip_reason is not defined

  rescue:
    - name: "Send error msg if one or more interface are not active"
      ansible.builtin.lineinfile:
        line: "HOSTNAME: {{ inventory_hostname }} | interface {{ item.item }} : ****NOT ACTIVE**** "
        dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
        create: yes
      delegate_to: localhost
      become: false

- block:
  - name: "Assert that the interface IP address does not change"
    ansible.builtin.assert:
      that:  item.msg in  ansible_all_ipv4_addresses
    loop: "{{ NIC_IP['results'] }}"

  - name: "Creating a report when the interface IP is OK"
    ansible.builtin.lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | interface {{ item.item.item }} : {{ item.msg }} : OK  "
      dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
      create: yes
    loop: "{{ NIC_IP['results'] }}"
    delegate_to: localhost
    become: false
  when: item.skip_reason is not defined

  rescue:
    - name: "Send error msg if IP address has changed"
      ansible.builtin.lineinfile:
        line: "HOSTNAME: {{ inventory_hostname }} | interface {{ item.item.item }} :  PLEASE CHECK THE IP ADDRESS"
        dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
        create: yes
      delegate_to: localhost
      become: false

- name: "Set post update os info"
  ansible.builtin.set_fact:
    os_info_post_update:
      distribution: "{{ ansible_distribution }}"
      distribution_major_version: "{{ ansible_distribution_major_version }}"
      distribution_release: "{{ ansible_distribution_release }}"
      distribution_version: "{{ ansible_distribution_version }}"
      kernel_version: "{{ ansible_kernel }}"

- name: "Current OS version information before the update"
  ansible.builtin.blockinfile:
    block: |
      HOSTNAME: "{{ inventory_hostname }}" version After the update:
        distribution: "{{ os_info_post_update.distribution  }}"
        distribution_major_version: "{{ os_info_post_update.distribution_major_version }}"
        distribution_release: "{{ os_info_post_update.distribution_release }}"
        distribution_version: "{{ os_info_post_update.distribution_version }}"
        kernel_version: "{{ ansible_kernel }}"
    dest: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
    create: yes
  delegate_to: localhost
  become: false

- name: "Set fact for attachment"
  ansible.builtin.set_fact:
    attachment_file: "{{ activity_logs }}update_{{ inventory_hostname }}_{{ timestamp }}"
  delegate_to: localhost
