---
- name: Playbook for OS Patching
  hosts: all
  become: true
  gather_facts: true

  handlers:
    - name: Reboot system
      ansible.builtin.reboot:
        reboot_timeout: 2400
        msg: "Reboot initiated by Ansible after system update"

  tasks:
    - name: Display OS family
      ansible.builtin.debug:
        var: ansible_os_family
      tags: always

    - name: Include steps for Linux
      ansible.builtin.include_tasks:
        file: linux.yml
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
      tags: patch

    - name: Include steps for Windows
      ansible.builtin.include_tasks:
        file: windows.yml
      when: ansible_os_family == "Windows"
      tags: patch

    - name: Check if attachment file exists
      ansible.builtin.stat:
        path: "{{ attachment_file }}"
      register: attachment_stat
      delegate_to: localhost
      become: false
      tags: report

    - name: Read file and base64 encode it
      slurp:
        src: "{{ attachment_file }}"
      register: attachment_path
      delegate_to: localhost
      become: false
      when: attachment_stat.stat.exists
      tags: report

    - name: Send email notification via Mailjet API
      ansible.builtin.uri:
        url: "{{ mailjet_api_url }}"
        method: POST
        force_basic_auth: yes
        url_username: "{{ mailjet_api_key }}"
        url_password: "{{ mailjet_api_secret }}"
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          Messages:
            - From:
                Email: "{{ from }}"
                Name: "Ansible Automation"
              To:
                - Email: "{{ to }}"
                  Name: "Recipient"
              Subject: "{{ subject }}"
              TextPart: "{{ body}}={{ inventory_hostname }}"
              Attachments:
                - ContentType: "text/plain"
                  Filename: "patch-report-{{ inventory_hostname }}.txt"
                  Base64Content: "{{ attachment_path.content }}"
      delegate_to: localhost
      become: false
      no_log: true

        #    - name: Send email notification via Mailjet SMTP server
        #      mail:
        #        host: "{{ mailjet_host }}"
        #        port: 587
        #        username: "{{ mailjet_api_key }}"
        #        password: "{{ mailjet_api_secret }}"
        #        secure: starttls
        #        from: "Ansible Automation <{{ from }}>"
        #        to: "{{ to }}"
        #        subject: "{{ subject }}"
        #        body: "{{ body}}={{ inventory_hostname }}"
        #      delegate_to: localhost
        #      become: false
